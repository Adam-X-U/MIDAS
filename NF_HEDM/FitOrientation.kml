// CACHE ID 1f2450de-eb0b-4f84-a444-5efb3f24ebcb-no-provenance
import(sys)
import(scheduler)
import(rlog)
import(swift)

types(
	xs:schema(
    			xs:simpleType("file", xs:restriction("string"))
    )
)
swift#string#17006 := swift:new("string", value="micfn")
swift#string#17008 := swift:new("string", value="%s: %i\n")
swift#string#17003 := swift:new("string", value="1")
swift#string#17009 := swift:new("string", value="StartNr is")
swift#string#17007 := swift:new("string", value="microstructure.mic")
swift#string#17001 := swift:new("string", value="/clhome/TOMO1/PeaksAnalysisHemant/NF_HEDM/ParametersSampleApril14.txt")
swift#string#17010 := swift:new("string", value="EndNr is")
swift#string#17004 := swift:new("string", value="endnr")
swift#string#17002 := swift:new("string", value="startnr")
swift#string#17000 := swift:new("string", value="paramfile")
swift#string#17005 := swift:new("string", value="100")
paramfile := 
			swift:new("string", dbgname="paramfile", waitCount=1, _defline=10)
 
startnr := 
			swift:new("int", dbgname="startnr", waitCount=1, _defline=11)
 
endnr := 
			swift:new("int", dbgname="endnr", waitCount=1, _defline=12)
 
micfn := 
			swift:new("string", dbgname="micfn", waitCount=1, _defline=13)
 

runfitorientation := function(pf, nr, micfn) {
	swift:unitStart("PROCEDURE", name="runfitorientation", line=3, outputs="")
	swift:execute(
		swift:tr("fitorientation")
		swift:stageIn(pf)
		swift:stageIn(nr)
		swift:stageIn(micfn)

		swift:arguments(
			pf, nr, micfn
		)


	)
	swift:unitEnd("PROCEDURE", name="runfitorientation", line=3)}

restartLog(name = k:concat(contextAttribute("SWIFT:SCRIPT_NAME"), "-", contextAttribute("SWIFT:RUN_ID"))) {
	swift:mains(
		swift:startProgressTicker()
		swift:mainp(
			uparallel(
				sequential(swift:setFieldValue(_traceline=11
					paramfile
					swiftscript:arg(
						swift#string#17000, swift#string#17001
					)
				)
				swift:partialCloseDataset(paramfile))
				sequential(swift:setFieldValue(_traceline=12
					startnr
					swiftscript:toInt(
						swiftscript:arg(
							swift#string#17002, swift#string#17003
						)
					)
				)
				swift:partialCloseDataset(startnr))
				sequential(swift:setFieldValue(_traceline=13
					endnr
					swiftscript:toInt(
						swiftscript:arg(
							swift#string#17004, swift#string#17005
						)
					)
				)
				swift:partialCloseDataset(endnr))
				sequential(swift:setFieldValue(_traceline=17
					micfn
					swiftscript:arg(
						swift#string#17006, swift#string#17007
					)
				)
				swift:partialCloseDataset(micfn))
				sequential(
					swift:unitStart("INTERNALPROC", name="tracef", outputs="")
					tracef(
				    	swift#string#17008
				    	swift#string#17009
				    	startnr
					)
					swift:unitEnd("INTERNALPROC", name="tracef")
				)
				sequential(
					swift:unitStart("INTERNALPROC", name="tracef", outputs="")
					tracef(
				    	swift#string#17008
				    	swift#string#17010
				    	endnr
					)
					swift:unitEnd("INTERNALPROC", name="tracef")
				)
				swift:tParallelFor($, _traceline=20, _vvar="i",
					getArrayIterator(swift:range(startnr, endnr))) {
					($$, i) := each($)
					swift:unitStart("FOREACH_IT", line=20) 
					runfitorientation(
						paramfile, i, micfn
					)


					swift:unitEnd("FOREACH_IT", line=20)
				}
			)
		)
		swift:stopProgressTicker()
	)
}
swift:cleanDataset(shutdown=true)

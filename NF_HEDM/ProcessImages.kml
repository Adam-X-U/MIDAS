// CACHE ID 1f2450de-eb0b-4f84-a444-5efb3f24ebcb-no-provenance
import(sys)
import(scheduler)
import(rlog)
import(swift)

types(
	xs:schema(
    			xs:simpleType("file", xs:restriction("string"))
    )
)
swift#string#17003 := swift:new("string", value="3")
swift#string#17005 := swift:new("string", value="180")
swift#string#17004 := swift:new("string", value="NrFilesPerLayer")
swift#string#17010 := swift:new("string", value=".err")
swift#string#17012 := swift:new("string", value="logs/Images_")
swift#string#17007 := swift:new("string", value="logs/Median_")
swift#string#17008 := swift:new("string", value=".out")
swift#string#17001 := swift:new("string", value="/data/tomo1/NFTest/ParametersGoldApril14.txt")
swift#string#17000 := swift:new("string", value="paramfile")
swift#string#17002 := swift:new("string", value="NrLayers")
swift#int#0 := swift:new("int", value=0)
swift#int#1 := swift:new("int", value=1)
paramfile := 
			swift:new("string", dbgname="paramfile", waitCount=1, _defline=16)
 
NrLayers := 
			swift:new("int", dbgname="NrLayers", waitCount=1, _defline=17)
 
NrFilesPerLayer := 
			swift:new("int", dbgname="NrFilesPerLayer", waitCount=1, _defline=18)
 

Medians := function(o, e, pf, layernr) {
	swift:unitStart("PROCEDURE", name="Medians", line=3, outputs="o,e")
	swift:execute(
		swift:tr("runmedian")
		swift:stageIn(pf)
		swift:stageIn(layernr)
		swift:stageOut(o)
		swift:stageOut(e)

		swift:arguments(
			pf, layernr
		)

		swift:stdout(swiftscript:filename(
			o
		))
		swift:stderr(swiftscript:filename(
			e
		))
	)
	swift:closeDataset(o)
	swift:closeDataset(e)
	swift:unitEnd("PROCEDURE", name="Medians", line=3)}

Images := function(oI, eI, paramf, layern, filenr, sr) {
	swift:unitStart("PROCEDURE", name="Images", line=8, outputs="oI,eI")
	swift:execute(
		swift:tr("runimageprocessing")
		swift:stageIn(paramf)
		swift:stageIn(layern)
		swift:stageIn(filenr)
		swift:stageIn(sr)
		swift:stageOut(oI)
		swift:stageOut(eI)

		swift:arguments(
			paramf, layern, filenr
		)

		swift:stdout(swiftscript:filename(
			oI
		))
		swift:stderr(swiftscript:filename(
			eI
		))
	)
	swift:closeDataset(oI)
	swift:closeDataset(eI)
	swift:unitEnd("PROCEDURE", name="Images", line=8)}

restartLog(name = k:concat(contextAttribute("SWIFT:SCRIPT_NAME"), "-", contextAttribute("SWIFT:RUN_ID"))) {
	swift:mains(
		swift:startProgressTicker()
		swift:mainp(
			uparallel(
				sequential(swift:setFieldValue(_traceline=17
					paramfile
					swiftscript:arg(
						swift#string#17000, swift#string#17001
					)
				)
				swift:partialCloseDataset(paramfile))
				sequential(swift:setFieldValue(_traceline=18
					NrLayers
					swiftscript:toInt(
						swiftscript:arg(
							swift#string#17002, swift#string#17003
						)
					)
				)
				swift:partialCloseDataset(NrLayers))
				sequential(swift:setFieldValue(_traceline=22
					NrFilesPerLayer
					swiftscript:toInt(
						swiftscript:arg(
							swift#string#17004, swift#string#17005
						)
					)
				)
				swift:partialCloseDataset(NrFilesPerLayer))
				swift:tParallelFor($, _traceline=22, _vvar="layer",
					getArrayIterator(swift:range(swift#int#1, NrLayers))) {
					($$, layer) := each($)
					swift:unitStart("FOREACH_IT", line=22) 
					swift#mapper#17006 := 
								swift:new("string", dbgname="swift#mapper#17006")
					 
					MedianOut := 
						swift:new("file", dbgname="MedianOut", _defline=23
							swift:mapping("single_file_mapper", swift:parameter("file", swift#mapper#17006))
						)
					 
					swift#mapper#17009 := 
								swift:new("string", dbgname="swift#mapper#17009")
					 
					MedianErr := 
						swift:new("file", dbgname="MedianErr", _defline=24
							swift:mapping("single_file_mapper", swift:parameter("file", swift#mapper#17009))
						)
					 
					uparallel(
						swift:setFieldValue(
							swift#mapper#17006
							swiftscript:strcat(
								swift#string#17007, layer, swift#string#17008
							)
						)

						swift:setFieldValue(
							swift#mapper#17009
							swiftscript:strcat(
								swift#string#17007, layer, swift#string#17010
							)
						)

						Medians(
							MedianOut, MedianErr
							paramfile, layer
						)

						swift:tParallelFor($, _traceline=26, _vvar="FileNr",
							getArrayIterator(swift:range(swift#int#0, swiftop:subtraction(NrFilesPerLayer, swift#int#1)))) {
							($$, FileNr) := each($)
							swift:unitStart("FOREACH_IT", line=26) 
							swift#mapper#17011 := 
										swift:new("string", dbgname="swift#mapper#17011")
							 
							ImageOut := 
								swift:new("file", dbgname="ImageOut", _defline=27
									swift:mapping("single_file_mapper", swift:parameter("file", swift#mapper#17011))
								)
							 
							swift#mapper#17013 := 
										swift:new("string", dbgname="swift#mapper#17013")
							 
							ImageErr := 
								swift:new("file", dbgname="ImageErr", _defline=28
									swift:mapping("single_file_mapper", swift:parameter("file", swift#mapper#17013))
								)
							 
							uparallel(
								swift:setFieldValue(
									swift#mapper#17011
									swiftscript:strcat(
										swift#string#17012, layer, FileNr, swift#string#17008
									)
								)

								swift:setFieldValue(
									swift#mapper#17013
									swiftscript:strcat(
										swift#string#17012, layer, FileNr, swift#string#17010
									)
								)

								Images(
									ImageOut, ImageErr
									paramfile, layer, FileNr, MedianOut
								)

							)
							swift:cleanDataset(ImageOut)
							swift:cleanDataset(ImageErr)
							swift:unitEnd("FOREACH_IT", line=26)
						}
					)
					swift:cleanDataset(MedianErr)
					swift:cleanDataset(MedianOut)
					swift:unitEnd("FOREACH_IT", line=22)
				}
			)
		)
		swift:stopProgressTicker()
	)
}
swift:cleanDataset(shutdown=true)

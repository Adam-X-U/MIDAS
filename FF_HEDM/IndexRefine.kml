// CACHE ID c9ebfc39-ad69-436e-8c46-06a6f9fc354d-no-provenance
import(sys)
import(scheduler)
import(rlog)
import(swift)

types(
	xs:schema(
    			xs:simpleType("file", xs:restriction("string"))
    )
)
swift#string#17000 := swift:new("string", value="SpotsToIndex.csv")
params := 
			swift:new("file", dbgname="params", _defline=8, input=true
				swift:mapping("single_file_mapper", swift:parameter("file", "paramstest.txt") )
			)
 
hkl := 
			swift:new("file", dbgname="hkl", _defline=9, input=true
				swift:mapping("single_file_mapper", swift:parameter("file", "hkls.csv") )
			)
 
spotsfile := 
			swift:new("file", dbgname="spotsfile", _defline=10, input=true
				swift:mapping("single_file_mapper", swift:parameter("file", "SpotsToIndex.csv") )
			)
 
spots := 
			swift:new("int[]", dbgname="spots", waitCount=1, _defline=12)
 

indexrefine := function(param, spotsinput, hkl, spotsfile) {
	swift:unitStart("PROCEDURE", name="indexrefine", line=3, outputs="")
	swift:execute(
		swift:tr("indexstrains")
		swift:stageIn(param)
		swift:stageIn(spotsinput)
		swift:stageIn(hkl)
		swift:stageIn(spotsfile)

		swift:arguments(
			spotsinput
		)


	)
	swift:unitEnd("PROCEDURE", name="indexrefine", line=3)}

restartLog(name = k:concat(contextAttribute("SWIFT:SCRIPT_NAME"), "-", contextAttribute("SWIFT:RUN_ID"))) {
	swift:mains(
		swift:startProgressTicker()
		swift:mainp(
			uparallel(
				sequential(swift:setFieldValue(_traceline=14
					spots
					sequential(
						swift#callintermediate := swift:new("int[int]", dbgname="swift#callintermediate",
							swift:mapping("concurrent_mapper",
								swift:parameter("prefix", "_callintermediate-")
							)
						)
						sequential(
							swift:unitStart("INTERNALPROC", name="readData", outputs="")
							readData(
						    	swift#callintermediate
						    	swift#string#17000
							)
							swift:unitEnd("INTERNALPROC", name="readData")
						)
						swift#callintermediate
					)
				)
				swift:partialCloseDataset(spots))
				swift:tParallelFor($, _traceline=14, _vvar="i",
					getArrayIterator(spots)) {
					($$, i) := each($)
					swift:unitStart("FOREACH_IT", line=14) 
					indexrefine(
						params, i, hkl, spotsfile
					)


					swift:unitEnd("FOREACH_IT", line=14)
				}
			)
		)
		swift:stopProgressTicker()
	)
}
swift:cleanDataset(spots)
swift:cleanDataset(spotsfile)
swift:cleanDataset(hkl)
swift:cleanDataset(params)
swift:cleanDataset(shutdown=true)
